name: Daily CVE Check

on:
  push:  # Temporary: to make workflow visible in GitHub Actions
    branches: [ daniszewski-NO-CONN-snyk-cve ]
  schedule:
    # Run daily at 8 AM UTC (adjust timezone as needed)
    - cron: '0 8 * * *'
  workflow_dispatch: # Allow manual triggering for testing

permissions:
  contents: read
  security-events: write

jobs:
  cve-scan:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main'  # Temporarily disabled for testing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # with:
        #   ref: main  # Will use current branch for testing

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js for Snyk CLI
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Generate requirements.txt for Snyk
        run: |
          echo "üìù Generating requirements.txt for Snyk to scan..."
          pip freeze > requirements.txt
          echo "Generated requirements.txt with $(wc -l < requirements.txt) packages"
          head -10 requirements.txt

      - name: Debug Snyk configuration
        run: |
          echo "üîç Checking Snyk configuration..."
          echo "Current directory: $(pwd)"
          echo "Python files found: $(find . -name "*.py" | wc -l)"
          echo "Package management files:"
          ls -la pyproject.toml requirements.txt setup.py setup.cfg 2>/dev/null || echo "Some package files missing"
          echo "Requirements.txt content (first 10 lines):"
          head -10 requirements.txt || echo "No requirements.txt found"
          echo "Total packages in requirements.txt: $(wc -l < requirements.txt)"

      - name: Install Snyk CLI
        run: |
          echo "üì¶ Installing Snyk CLI..."
          npm install -g snyk
          snyk version

      - name: Run Snyk to check for CVEs
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_GITHUB_INTEGRATION_TOKEN_PUBLIC_REPO }}
          SNYK_ORG: ${{ secrets.SNYK_ORG_ID_PUBLIC_REPO }}
        run: |
          echo "üîê Authenticating with Snyk..."
          snyk auth $SNYK_TOKEN

          echo "üîç Testing for vulnerabilities..."
          echo "Command: snyk test --severity-threshold=medium --sarif-file-output=snyk-cve.sarif"

          # Try to run Snyk and capture both output and exit code
          set +e  # Don't exit on error
          snyk test --severity-threshold=medium --sarif-file-output=snyk-cve.sarif
          snyk_exit_code=$?
          set -e  # Re-enable exit on error

          echo "Snyk exit code: $snyk_exit_code"
          echo "Exit codes: 0=no issues, 1=issues found, 2=failure, 3=no supported files"

          # Handle different exit codes appropriately
          if [ $snyk_exit_code -eq 0 ]; then
            echo "‚úÖ No vulnerabilities found!"
          elif [ $snyk_exit_code -eq 1 ]; then
            echo "‚ö†Ô∏è Vulnerabilities found - check SARIF file"
          elif [ $snyk_exit_code -eq 2 ]; then
            echo "‚ùå Snyk failed to run properly"
            exit 1
          elif [ $snyk_exit_code -eq 3 ]; then
            echo "‚ö†Ô∏è No supported target files detected"
            echo "This might be resolved by generating requirements.txt"
          else
            echo "‚ÑπÔ∏è Unexpected exit code: $snyk_exit_code"
          fi

      - name: Debug Snyk output
        run: |
          echo "üîç Checking what Snyk generated..."
          ls -la *.sarif || echo "No SARIF files found"
          ls -la snyk* || echo "No snyk files found"

      - name: Check if SARIF file exists
        id: check_sarif
        run: |
          if [ -f "snyk-cve.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SARIF file found"
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è SARIF file not found - Snyk may have failed or found no issues"
          fi

      - name: Upload CVE results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: snyk-cve.sarif
          category: daily-cve-scan

      - name: Print scan summary
        run: |
          echo "‚úÖ Daily CVE scan completed"
          if [ -f "snyk-cve.sarif" ]; then
            echo "üìä Results uploaded to GitHub Security tab"
            echo "üîç Check the Security tab for any vulnerabilities found"
          else
            echo "‚ö†Ô∏è No SARIF file generated - this could mean:"
            echo "   ‚Ä¢ No vulnerabilities found (good!)"
            echo "   ‚Ä¢ Snyk authentication failed"
            echo "   ‚Ä¢ No supported package managers detected"
            echo "üîç Check the Snyk step logs for details"
          fi
