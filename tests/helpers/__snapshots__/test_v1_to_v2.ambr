# serializer version: 1
# name: test_if_template_is_not_rendered_during_migration_with_option_checked[snowpark_templated_v1]
  '''
  definition_version: '2'
  entities:
    hello_procedure:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: hello_procedure
      artifacts:
      - src: <% ctx.env.project_source %>
        dest: <! project_name | to_snowflake_identifier !>
      handler: procedures.hello_procedure
      returns: string
      signature:
      - name: name
        type: string
      stage: <! stage | to_snowflake_identifier !>
      type: procedure
      execute_as_caller: false
    test_procedure:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: test_procedure
      artifacts:
      - src: <% ctx.env.project_source %>
        dest: <! project_name | to_snowflake_identifier !>
      handler: procedures.test_procedure
      returns: string
      signature: ''
      stage: <! stage | to_snowflake_identifier !>
      type: procedure
      execute_as_caller: false
    hello_function:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: hello_function
      artifacts:
      - src: <% ctx.env.project_source %>
        dest: <! project_name | to_snowflake_identifier !>
      handler: functions.hello_function
      returns: string
      signature:
      - name: name
        type: string
      stage: <! stage | to_snowflake_identifier !>
      type: function
  env:
    project_source: app/
  mixins:
    snowpark_shared:
      stage: <! stage | to_snowflake_identifier !>
      artifacts:
      - src: <% ctx.env.project_source %>
        dest: <! project_name | to_snowflake_identifier !>
  
  '''
# ---
# name: test_if_template_is_not_rendered_during_migration_with_option_checked[snowpark_templated_v1].1
  '''
  definition_version: "1.1"
  snowpark:
    project_name: "<! project_name | to_snowflake_identifier !>"
    stage_name: "<! stage | to_snowflake_identifier !>"
    src: <% ctx.env.project_source %>
    functions:
      - name: hello_function
        handler: "functions.hello_function"
        signature:
          - name: "name"
            type: "string"
        returns: string
    procedures:
      - name: hello_procedure
        handler: "procedures.hello_procedure"
        signature:
          - name: "name"
            type: "string"
        returns: string
      - name: test_procedure
        handler: "procedures.test_procedure"
        signature: ""
        returns: string
  env:
    project_source: "app/"
  
  '''
# ---
# name: test_if_template_is_not_rendered_during_migration_with_option_checked[streamlit_templated_v1]
  '''
  definition_version: '2'
  entities:
    streamlit_entity_1:
      identifier:
        name: <! name | to_snowflake_identifier !>
      artifacts:
      - src: streamlit_app.py
      - src: environment.yml
      - src: pages
      - src: common/hello.py
      type: streamlit
      title: <% ctx.env.streamlit_title %>
      query_warehouse: <! query_warehouse | to_snowflake_identifier !>
      main_file: streamlit_app.py
      pages_dir: pages
      stage: <! stage | to_snowflake_identifier !>
  env:
    streamlit_title: My Fancy Streamlit
  
  '''
# ---
# name: test_if_template_is_not_rendered_during_migration_with_option_checked[streamlit_templated_v1].1
  '''
  definition_version: "1.1"
  streamlit:
    name: <! name | to_snowflake_identifier !>
    stage: <! stage | to_snowflake_identifier !>
    query_warehouse: <! query_warehouse | to_snowflake_identifier !>
    main_file: streamlit_app.py
    env_file: environment.yml
    pages_dir: pages/
    title: <% ctx.env.streamlit_title %>
    additional_source_files:
      - common/hello.py
  env:
    streamlit_title: "My Fancy Streamlit"
  
  '''
# ---
# name: test_migrating_a_file_with_duplicated_keys_raises_an_error[\n    - name: test\n      handler: "test"\n      signature: ""\n      returns: string\n      handler: test\n      runtime: "3.10"\n    ]
  '''
  +- Error ----------------------------------------------------------------------+
  | While loading the project definition file, duplicate key was found: handler  |
  +------------------------------------------------------------------------------+
  
  '''
# ---
# name: test_migrating_a_file_with_duplicated_keys_raises_an_error[\n    - name: test\n      handler: "test"\n      signature: ""\n      returns: string\n      runtime: "3.10"\n    ]
  '''
  +- Error ----------------------------------------------------------------------+
  | Entity with name test seems to be duplicated. Please rename it and try       |
  | again.                                                                       |
  +------------------------------------------------------------------------------+
  
  '''
# ---
# name: test_migrating_a_file_with_duplicated_keys_raises_an_error[\nstreamlit:\n  name: test\n  stage: streamlit\n  query_warehouse: test_warehouse\n  main_file: "streamlit_app.py"\n  title: "My Fancy Streamlit"\n    ]
  '''
  +- Error ----------------------------------------------------------------------+
  | In your project, streamlit and snowpark entities share the same name. Please |
  | rename them and try again.                                                   |
  +------------------------------------------------------------------------------+
  
  '''
# ---
# name: test_migration_native_app_no_artifacts
  '''
  definition_version: '2'
  entities:
    procedureName:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: procedureName
      artifacts:
      - src: app/
        dest: my_snowpark_project
      handler: hello
      returns: string
      signature:
      - name: name
        type: string
      stage: dev_deployment
      type: procedure
      execute_as_caller: false
    func1:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: func1
      artifacts:
      - src: app/
        dest: my_snowpark_project
      handler: app.func1_handler
      returns: string
      signature:
      - name: a
        type: string
        default: default value
      - name: b
        type: variant
      runtime: '3.1'
      stage: dev_deployment
      type: function
    test_streamlit:
      identifier:
        name: test_streamlit
      artifacts:
      - src: streamlit_app.py
      - src: environment.yml
      - src: pages
      type: streamlit
      title: My Fancy Streamlit
      query_warehouse: test_warehouse
      main_file: streamlit_app.py
      pages_dir: None
      stage: streamlit
    pkg:
      meta:
        role: pkg_role
      identifier: <% fn.concat_ids('myapp', '_pkg_', fn.sanitize_id(fn.get_username('unknown_user')) | lower) %>
      artifacts: []
      type: application package
    app:
      identifier: myapp_app
      type: application
      from:
        target: pkg
  mixins:
    snowpark_shared:
      stage: dev_deployment
      artifacts:
      - src: app/
        dest: my_snowpark_project
  
  '''
# ---
# name: test_migration_native_app_no_artifacts.1
  '''
  definition_version: 1
  native_app:
    application:
      name: myapp_app
    artifacts: []
    name: myapp
    package:
      role: pkg_role
  snowpark:
    functions:
    - handler: app.func1_handler
      name: func1
      returns: string
      runtime: 3.1
      signature:
      - default: default value
        name: a
        type: string
      - name: b
        type: variant
    procedures:
    - handler: hello
      name: procedureName
      returns: string
      signature:
      - name: name
        type: string
    project_name: my_snowpark_project
    src: app/
    stage_name: dev_deployment
  streamlit:
    main_file: streamlit_app.py
    name: test_streamlit
    query_warehouse: test_warehouse
    stage: streamlit
    title: My Fancy Streamlit
  
  '''
# ---
# name: test_migrations_with_all_app_entities
  '''
  definition_version: '2'
  entities:
    pkg:
      meta:
        warehouse: pkg_wh
        role: pkg_role
        post_deploy:
        - sql_script: scripts/post_pkg_deploy.sql
      identifier: my_app_package
      artifacts:
      - src: app/*
        dest: ./
      - src: to_process/*
        dest: ./
        processors:
        - name: native app setup
        - name: templates
          properties:
            foo: bar
      deploy_root: my_output/my_deploy
      type: application package
      bundle_root: my_output/my_bundle
      generated_root: __my_generated_files
      stage: app_src.my_stage
      scratch_stage: app_src.my_scratch
      distribution: external
    app:
      meta:
        warehouse: app_wh
        role: app_role
        post_deploy:
        - sql_script: scripts/post_app_deploy.sql
      identifier: myapp_app
      type: application
      from:
        target: pkg
      debug: true
  
  '''
# ---
# name: test_migrations_with_all_app_entities.1
  '''
  definition_version: 1
  native_app:
    name: myapp
    source_stage: app_src.my_stage
    scratch_stage: app_src.my_scratch
    bundle_root: my_output/my_bundle
    deploy_root: my_output/my_deploy
    generated_root: __my_generated_files
    artifacts:
      - src: app/*
        dest: ./
      - src: to_process/*
        dest: ./
        processors:
          - native app setup
          - name: templates
            properties:
              foo: bar
    package:
      name: my_app_package
      role: pkg_role
      warehouse: pkg_wh
      distribution: external
      scripts:
        - scripts/post_pkg_deploy.sql
    application:
      name: myapp_app
      role: app_role
      warehouse: app_wh
      debug: true
      post_deploy:
        - sql_script: scripts/post_app_deploy.sql
  
  '''
# ---
# name: test_migrations_with_multiple_entities
  '''
  definition_version: '2'
  entities:
    procedureName:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: procedureName
      artifacts:
      - src: app/
        dest: my_snowpark_project
      handler: hello
      returns: string
      signature:
      - name: name
        type: string
      stage: dev_deployment
      type: procedure
      execute_as_caller: false
    func1:
      imports: []
      external_access_integrations: []
      secrets: {}
      meta:
        use_mixins:
        - snowpark_shared
      identifier:
        name: func1
      artifacts:
      - src: app/
        dest: my_snowpark_project
      handler: app.func1_handler
      returns: string
      signature:
      - name: a
        type: string
        default: default value
      - name: b
        type: variant
      runtime: '3.10'
      stage: dev_deployment
      type: function
    test_streamlit:
      identifier:
        name: test_streamlit
      artifacts:
      - src: streamlit_app.py
      - src: environment.yml
      - src: pages
      type: streamlit
      title: My Fancy Streamlit
      query_warehouse: test_warehouse
      main_file: streamlit_app.py
      pages_dir: None
      stage: streamlit
    pkg:
      meta:
        role: pkg_role
      identifier: <% fn.concat_ids('myapp', '_pkg_', fn.sanitize_id(fn.get_username('unknown_user')) | lower) %>
      artifacts:
      - src: app/*
        dest: ./
      type: application package
    app:
      identifier: myapp_app
      type: application
      from:
        target: pkg
  mixins:
    snowpark_shared:
      stage: dev_deployment
      artifacts:
      - src: app/
        dest: my_snowpark_project
  
  '''
# ---
# name: test_migrations_with_multiple_entities.1
  '''
  definition_version: 1
  streamlit:
    name: test_streamlit
    stage: streamlit
    query_warehouse: test_warehouse
    main_file: "streamlit_app.py"
    title: "My Fancy Streamlit"
  snowpark:
    project_name: "my_snowpark_project"
    stage_name: "dev_deployment"
    src: "app/"
    functions:
      - name: func1
        handler: "app.func1_handler"
        signature:
          - name: "a"
            type: "string"
            default: "default value"
          - name: "b"
            type: "variant"
        returns: string
        runtime: 3.10
    procedures:
      - name: procedureName
        handler: "hello"
        signature:
          - name: "name"
            type: "string"
        returns: string
  native_app:
    name: myapp
    artifacts:
      - src: app/*
        dest: ./
    package:
      role: pkg_role
    application:
      name: myapp_app
  
  '''
# ---
